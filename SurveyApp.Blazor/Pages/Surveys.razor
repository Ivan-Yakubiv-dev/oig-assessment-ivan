@page "/surveys"

<PageTitle>Surveys overview</PageTitle>

@using SurveyApp.Blazor.Services
@using SurveyApp.Common.Enums
@using SurveyApp.DtoModels
@inject QuestionnaireApiService QuestionnaireApiService
@inject NavigationManager NavigationManager

<h1>Available questionnaires:</h1>

@if (_questionnaires == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th class="survey-header" @onclick="@(() => ChangeSortParams("StartTimeUtc"))">
                    <span class="mr- oi @(_filterParams.SortBy != "StartTimeUtc" ? "d-none" : _filterParams.IfSortAsc ? "oi-arrow-thick-top" : "oi-arrow-thick-bottom")"></span>
                    Start date/time
                </th>
                <th class="survey-header" @onclick="@(() => ChangeSortParams("Name"))">
                    <span class="oi @(_filterParams.SortBy != "Name" ? "d-none" : _filterParams.IfSortAsc ? "oi-arrow-thick-top" : "oi-arrow-thick-bottom")"></span>
                    Questionnaire title
                </th>
                <th class="survey-header" @onclick="@(() => ChangeSortParams("EndTimeUtc"))">
                    <span class="oi @(_filterParams.SortBy != "EndTimeUtc" ? "d-none" : _filterParams.IfSortAsc ? "oi-arrow-thick-top" : "oi-arrow-thick-bottom")"></span>
                    End date/time
                </th>
                <th class="survey-header" @onclick="@(() => ChangeSortParams("Status"))">
                    <span class="oi @(_filterParams.SortBy != "Status" ? "d-none" : _filterParams.IfSortAsc ? "oi-arrow-thick-top" : "oi-arrow-thick-bottom")"></span>
                    Current state
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var survey in _questionnaires)
            {
                <tr class="survey-row" @onclick="() => GoToQuestionnaireDetails(survey.Id)">
                    <td>@survey.StartTimeUtc.GetValueOrDefault().ToString("yy-MMM-dd HH:mm")</td>
                    <td>@survey.Name</td>
                    <td>@survey.EndTimeUtc.GetValueOrDefault().ToString("yy-MMM-dd HH:mm")</td>
                    <td><span class="badge @GenerateLabelClass(survey.Status)">@survey.Status</span></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PublicQuestionnaireDto[] _questionnaires;
    private FilterParams _filterParams;

    protected override async Task OnInitializedAsync()
    {
        _filterParams = new FilterParams
        {
            SortBy = nameof(PublicQuestionnaireDto.StartTimeUtc)
        };

        await RetrieveQuestionnaires();
    }

    private async Task RetrieveQuestionnaires()
    {
        _questionnaires = await QuestionnaireApiService.GetQuestionnaires(_filterParams);    
    }

    private void GoToQuestionnaireDetails(int questionnaireId)
    {
        NavigationManager.NavigateTo($"questionnaire/{questionnaireId}");
    }

    private string GenerateLabelClass(SurveyStatus status)
    {
        switch (status)
        {
            case SurveyStatus.Concept:
                return "badge-primary";
            case SurveyStatus.Scheduled:
                return "badge-warning";
            case SurveyStatus.Active:
                return "badge-danger";
            case SurveyStatus.Completed:
                return "badge-success";
            default:
                return "badge-default";
        }
    }

    private async Task ChangeSortParams(string propertyName)
    {
        if (_filterParams.SortBy == propertyName)
        {
            _filterParams.IfSortAsc = !_filterParams.IfSortAsc;
        }
        else
        {
            _filterParams.SortBy = propertyName;
            _filterParams.IfSortAsc = false;
        }

        await RetrieveQuestionnaires();
    }
}
