// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveyApp.API.DAL;

#nullable disable

namespace SurveyApp.API.Migrations
{
    [DbContext(typeof(SurveyDbContext))]
    partial class SurveyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("SurveyApp.Domain.Entities.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Questionnaires", "public");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionnaireItemId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionnaireSubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireItemId");

                    b.HasIndex("QuestionnaireSubmissionId");

                    b.ToTable("QuestionnaireAnswers", "public");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireItems", "public");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("text");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireSubmissions", "public");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.Questionnaire", b =>
                {
                    b.HasOne("SurveyApp.Domain.Entities.User", "Owner")
                        .WithMany("OwnedQuestionnaires")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireAnswer", b =>
                {
                    b.HasOne("SurveyApp.Domain.Entities.QuestionnaireItem", "QuestionnaireItem")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionnaireItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyApp.Domain.Entities.QuestionnaireSubmission", "QuestionnaireSubmission")
                        .WithMany("QuestionnaireAnswers")
                        .HasForeignKey("QuestionnaireSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionnaireItem");

                    b.Navigation("QuestionnaireSubmission");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireItem", b =>
                {
                    b.HasOne("SurveyApp.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnaireItems")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireSubmission", b =>
                {
                    b.HasOne("SurveyApp.Domain.Entities.User", "Participant")
                        .WithMany("AttendedQuestionnaires")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("SurveyApp.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Submissions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.Questionnaire", b =>
                {
                    b.Navigation("QuestionnaireItems");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireItem", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.QuestionnaireSubmission", b =>
                {
                    b.Navigation("QuestionnaireAnswers");
                });

            modelBuilder.Entity("SurveyApp.Domain.Entities.User", b =>
                {
                    b.Navigation("AttendedQuestionnaires");

                    b.Navigation("OwnedQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
